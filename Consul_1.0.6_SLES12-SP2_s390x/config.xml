<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_sl12-SP2_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 14 * * 3</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 14 * * 3</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Set the below parameters manually
package_name=&quot;consul&quot;
published_version=&quot;1.0.6&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi

# Install dependencies
sudo zypper update -y 
sudo zypper install -y gcc git make tar unzip vim wget zip curl 

# build go 
export GOPATH=$PWD
wget https://storage.googleapis.com/golang/go1.9.2.linux-s390x.tar.gz
chmod ugo+r go1.9.2.linux-s390x.tar.gz
sudo tar -C /usr/local -xzf go1.9.2.linux-s390x.tar.gz
export PATH=$PATH:/usr/local/go/bin
export PATH=$GOPATH/bin:$PATH
cd /usr/bin
sudo ln gcc s390x-linux-gnu-gcc
go version

mkdir -p $GOPATH/src/github.com/hashicorp
cd $GOPATH/src/github.com/hashicorp
git clone https://github.com/hashicorp/consul.git
cd consul &amp;&amp; git checkout tags/v1.0.6
go get github.com/mitchellh/gox

# Add changes added in https://github.com/mitchellh/gox/pull/85 to Consul code
cd $GOPATH/src/github.com/mitchellh/gox
git checkout v0.4.0
wget https://github.com/mitchellh/gox/pull/85.patch
git config user.email &quot;kbhute@github.com&quot;
git config user.name &quot;kbhute&quot;

git am 85.patch

# Recompile gox
cd $GOPATH/src/github.com/mitchellh
go get github.com/mitchellh/iochan
go install ./...

# Build Consul
cd $GOPATH/src/github.com/hashicorp/consul
gox -os=linux -arch=s390x -output=s390x/consul


#Run test cases (Optional)
#Testcases need host to be run.
#cd $GOPATH/src/github.com/hashicorp/consul/
#make test 2&gt;&amp;1 | tee maketestlog


# Testing
cd $GOPATH/src/github.com/hashicorp/consul/s390x/
nohup ./consul agent -dev &amp;
sleep 50s
cd $GOPATH/src/github.com/hashicorp/consul/s390x/
./consul members


pgrep -d&quot; &quot; -f &quot;consul&quot; | xargs kill;
cd $GOPATH/src/github.com/hashicorp/consul/s390x/
sudo rm -rf /etc/consul.d
sudo mkdir /etc/consul.d

echo &apos;{&quot;service&quot;: {&quot;name&quot;: &quot;web&quot;, &quot;tags&quot;: [&quot;rails&quot;], &quot;port&quot;: 80}}&apos; \
    | sudo tee /etc/consul.d/web.json
    
    
cd $GOPATH/src/github.com/hashicorp/consul/s390x/
nohup ./consul agent -dev -config-dir=/etc/consul.d &amp;
sleep 50s


curl http://localhost:8500/v1/catalog/service/web 

pgrep -d&quot; &quot; -f &quot;consul&quot; | xargs kill;
ps -aef

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
//it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <hudson.tasks.Mailer plugin="mailer@1.18">
      <recipients></recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.tasks.Mailer>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@vitthalb</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dockercloud_rhel7.2_root-node</assignedNode>
  <canRoam>false</canRoam>
  <disabled>true</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 15 * * 2</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>source /home/test/.bashrc
export GOPATH=`pwd`

whoami
cat /etc/os*
#Install dependencies
yum install -y java-1.8.0-openjdk make gcc tar wget git unzip


#Install Nodejs v4+
cd $GOPATH
wget http://public.dhe.ibm.com/ibmdl/export/pub/systems/cloud/runtimes/nodejs/8.9.4.0/linux/s390x/ibm-8.9.4.0-node-v8.9.4-linux-s390x.bin
chmod +x ibm-8.9.4.0-node-v8.9.4-linux-s390x.bin
echo -e &quot;LICENSE_ACCEPTED=TRUE\nUSER_INSTALL_DIR=/root/ibm/node\n-fileOverwrite_/root/ibm/node/_node_installation/uninstall.lax=Yes&quot; &gt; installer.properties
cat installer.properties
./ibm-8.9.4.0-node-v8.9.4-linux-s390x.bin -f installer.properties -i silent

export PATH=$PATH:/root/ibm/node/bin
node -v


#Install Golang

cd $GOPATH
yum install -y tar wget gcc
wget https://storage.googleapis.com/golang/go1.9.2.linux-s390x.tar.gz
chmod ugo+r go1.9.2.linux-s390x.tar.gz
sudo tar -C /usr/local -xzf go1.9.2.linux-s390x.tar.gz
export PATH=$PATH:/usr/local/go/bin
cd /usr/bin/
ln gcc s390x-linux-gnu-gcc 


go version

#Install Grafana

mkdir -p $GOPATH/src/github.com/grafana
cd $GOPATH/src/github.com/grafana
git clone https://github.com/grafana/grafana.git
cd grafana
git checkout v4.6.3

cd ./vendor/github.com/klauspost/compress/gzip
cp gunzip.go gunzip.go.copy
cp gzip.go gzip.go.copy

#Edit the file vendor/github.com/klauspost/compress/gzip/gunzip.go
sed -i &apos;17d &apos; gunzip.go
sed -i &quot;17 i \\\t\&quot;hash/crc32\&quot;&quot; gunzip.go

#Edit the file vendor/github.com/klauspost/compress/gzip/gzip.go
sed -i &apos;14d &apos; gzip.go
sed -i &quot;14 i \\\t\&quot;hash/crc32\&quot;&quot; gzip.go
git diff

cd $GOPATH/src/github.com/grafana/grafana
make deps-go
make build-go


#Build Grafana frontend assets


#Install PhantomJS
cd $GOPATH
yum -y install gcc gcc-c++ make flex bison gperf ruby openssl-devel freetype-devel fontconfig-devel libicu-devel sqlite-devel libpng-devel libjpeg-devel libXfont.s390x libXfont-devel.s390x xorg-x11-utils.s390x xorg-x11-font-utils.s390x tzdata.noarch tzdata-java.noarch xorg-x11-fonts-Type1.noarch  xorg-x11-font-utils.s390x python-setuptools git wget tar 

#Install python	
yum install -y gcc g++ make ncurses patch bzip2-devel 
wget https://www.python.org/ftp/python/2.7.9/Python-2.7.9.tar.xz
tar -xvf Python-2.7.9.tar.xz
cd Python-2.7.9
./configure --prefix=/usr/local --exec-prefix=/usr/local
make &amp;&amp; sudo make install

python --version

#Install python module
easy_install argparse

cd $GOPATH
git clone git://github.com/ariya/phantomjs.git
cd phantomjs
git checkout 2.1.1
python build.py 
#Executed test cases in PhantomJS published recipe and in eco0017 jobs, and its running fine so skipped testing phatomjs step.
export PATH=$GOPATH/phantomjs/bin:$PATH
phantomjs --version

cd $GOPATH
#Install gperf
wget http://archives.fedoraproject.org/pub/archive/fedora-secondary/releases/23/Everything/s390x/os/Packages/g/gperf-3.0.4-11.fc23.s390x.rpm
rpm -Uvh gperf-3.0.4-11.fc23.s390x.rpm

#install Yarn
cd /opt
wget https://github.com/yarnpkg/yarn/releases/download/v1.3.2/yarn-v1.3.2.tar.gz
tar zvxf yarn-v1.3.2.tar.gz
export PATH=$PATH:/opt/yarn-v1.3.2/bin

#Install Grunt
cd $GOPATH/src/github.com/grafana/grafana/
npm install grunt

#Build the components
cd $GOPATH/src/github.com/grafana/grafana/
make deps-js
make build-js


yum install -y curl
./bin/grafana-server &amp;
sleep 180s
curl http://localhost:3000/login
sleep 20s

 pgrep -d&quot; &quot; -f &quot;grafana-server&quot; | xargs kill || true 
 sleep 20s
#Testing

#Test backend
make test-go

#Test frontend
make test-js 2&gt;&amp;1 | tee testlogs &amp;&amp; grep &apos;Warning: Task &quot;karma:test&quot; &apos; testlogs &gt; generated_failures
cut -d &apos; &apos; -f1-3 generated_failures &gt; generated_failures1
echo &apos; Warning: Task &quot;karma:test&quot; &apos; &gt; expected_failures
diff -u  --ignore-all-space generated_failures1 expected_failures

$GOPATH/src/github.com/grafana/grafana/bin/grafana-server -v

$GOPATH/src/github.com/grafana/grafana/bin/grafana-cli -v

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
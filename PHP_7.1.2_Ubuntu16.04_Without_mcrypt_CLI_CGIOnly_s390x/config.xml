<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>PHP Without mcrypt and intl extensions (CLI and CGI SAPIs only)</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_ub16.04_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 10 * * 4</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 10 * * 4</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>export WORK_DIR=`pwd`

# Install dependencies
export PATH=/usr/local/bin:$PATH
echo $PATH
sudo cp /etc/apt/sources.list /etc/apt/sources.list.oring
sudo chmod 777 /etc/apt/sources.list
echo &quot;deb http://ports.ubuntu.com/ubuntu-ports/ xenial main restricted universe multiverse
deb-src http://ports.ubuntu.com/ubuntu-ports/ xenial main restricted universe multiverse
deb http://ports.ubuntu.com/ubuntu-ports/ xenial-security main restricted universe multiverse
deb http://ports.ubuntu.com/ubuntu-ports/ xenial-updates main restricted universe  multiverse
deb-src http://ports.ubuntu.com/ubuntu-ports/ xenial-security main restricted universe multiverse
deb-src http://ports.ubuntu.com/ubuntu-ports/ xenial-updates main restricted universe multiverse&quot; &gt;&gt;/etc/apt/sources.list


sudo apt-get update &amp;&amp; \
sudo apt-get install -y autoconf automake bison flex gcc git libbz2-dev libcurl4-gnutls-dev \
                     libdb-dev libfreetype6-dev libgdbm-dev libgmp3-dev libjpeg-dev libldap2-dev \
                     libmysqlclient-dev libpcre3-dev libpng-dev libpq-dev libreadline-dev libsasl2-dev \
                     libsnmp-dev libssl-dev libtool-bin libxml2-dev libxpm-dev libxslt1-dev libzip-dev make \
                     openssl pkg-config re2c snmp-mibs-downloader unixodbc-dev vim
# Get the source code      
cd $WORK_DIR
git clone https://github.com/php/php-src.git
cd php-src
git checkout tags/php-7.1.2   

# Symlink LDAP libraries and GMP header
sudo ln -sf /usr/lib/s390x-linux-gnu/libldap.so /usr/lib/libldap.so
sudo ln -sf /usr/lib/s390x-linux-gnu/liblber.so /usr/lib/liblber.so
sudo ln -sf /usr/include/s390x-linux-gnu/gmp.h /usr/include/gmp.h

#Build PHP

#a. Without mcrypt and intl extensions:
#CLI and CGI SAPIs only
cd $WORK_DIR/php-src
./buildconf --force
./configure --datadir=/usr/local/share/php --localstatedir=/var --mandir=/usr/local/share/man --prefix=/usr/local --sysconfdir=/usr/local/etc --enable-bcmath --enable-calendar --enable-ctype --with-curl --enable-dba=shared --enable-exif --enable-filter --enable-flatfile --enable-fpm --enable-ftp --enable-gd-native-ttf --enable-inifile --enable-mbstring --enable-mysqlnd --enable-opcache --enable-pcntl --enable-shmop --enable-simplexml --enable-sockets --enable-sysvsem --enable-sysvshm --enable-sysvmsg --enable-xmlreader --enable-xmlwriter --enable-zend-signals --enable-zip --disable-phpdbg --disable-phpdbg-webhelper --with-bz2 --with-config-file-path=/usr/local/etc --with-config-file-scan-dir=/usr/local/etc/conf.d --with-freetype-dir --with-gd --with-gdbm --with-gettext --with-gmp --with-iconv --with-jpeg-dir --with-kerberos --with-ldap --with-ldap-sasl --with-mysql-sock=/var/lib/mysql/mysql.sock --with-mysqli=mysqlnd --with-openssl --with-pcre-regex --with-pdo-mysql=mysqlnd --with-pdo-odbc=unixODBC,/usr --with-pdo-pgsql --with-pdo-sqlite --with-pgsql --with-png-dir --with-readline --with-snmp --with-sqlite3 --with-unixODBC=/usr --with-xpm-dir=/usr --with-xsl --with-zlib --without-pcre-jit
make clean
make -j$(cat /proc/cpuinfo | grep processor | wc -l)

 
make test 
#(**NOTE:There are few test case failures which are also observed on Intel x86 platform. These failures can be ignored.)

sudo make install
sudo install -m644 php.ini-production /usr/local/etc/php.ini
sudo sed -i &apos;s@php/includes&quot;@&amp;\ninclude_path = &quot;.:/usr/local/lib/php&quot;@&apos; /usr/local/etc/php.ini
php -v

#Configure PHP
# PHP-FPM
#Modify the file /usr/local/etc/php-fpm.conf.default to set php-fpm pid
sudo cp /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf.default.orig 
sudo sed -i &apos;17d&apos; /usr/local/etc/php-fpm.conf.default
sudo sed -i &quot;17i pid = run/php-fpm.pid&quot; /usr/local/etc/php-fpm.conf.default

sudo mv /usr/local/etc/php-fpm.conf.default /usr/local/etc/php-fpm.conf
sudo mv /usr/local/etc/php-fpm.d/www.conf.default /usr/local/etc/php-fpm.d/www.conf

#Modify the file /&lt;source_root&gt;/php-src/sapi/fpm/php-fpm.service.in to set php-fpm service environment variables
cd $WORK_DIR/php-src/sapi/fpm/
sudo cp php-fpm.service.in php-fpm.service.in.orig
sudo sed -i &apos;10d&apos; php-fpm.service.in
sudo sed -i &quot;10i Type=simple&quot; php-fpm.service.in
sudo sed -i &apos;11d&apos; php-fpm.service.in
sudo sed -i &quot;11i PIDFile=/var/run/php-fpm.pid&quot; php-fpm.service.in
sudo sed -i &apos;12d&apos; php-fpm.service.in
sudo sed -i &quot;12i ExecStart=/usr/local/sbin/php-fpm --nodaemonize --fpm-config /usr/local/etc/php-fpm.conf&quot; php-fpm.service.in

cd $WORK_DIR/php-src
sudo cp $WORK_DIR/php-src/sapi/fpm/php-fpm.service.in /lib/systemd/system/php-fpm.service
sudo systemctl enable php-fpm.service
#sudo systemctl daemon-reload (**NOTE-This command worked on host not in container)
#sudo systemctl start php-fpm.service (**NOTE-This command worked on host not in container)
#Zend OPcache
#Modify the file /usr/local/etc/php.ini to enable Zend OPcache:
sudo cp /usr/local/etc/php.ini /usr/local/etc/php.ini.orig
sudo sed -i &quot;1784i zend_extension=opcache.so&quot; /usr/local/etc/php.ini

php -v

if php -v | grep &quot;Zend OPcache v7.1.2&quot;; then
  echo &quot;Done&quot;
  exit 0
else
  exit 1
fi </command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned,@chandranana.naik,@ketank</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
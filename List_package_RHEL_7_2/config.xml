<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dockercloud_rhel7</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

set +o noclobber # Allow overwrite of files just in case it is set to off

arch_packages=&apos;&apos;

# Prepare Python script that will read JSON lists and prepares final list data of packages with update version and
# install version so that its usable by application
############################### Python Script for All JSON packages starts#########################
python_architecute_package_script=&quot;#!/usr/bin/python
import json;
import sys;
# Preparing variables for storing data.
final_list=[];
installed_list=[];
updates_list=[];
already_installed=[];

# Check and proceed if given data is valid. If data is bad just return empty.
try:
    data=json.load(open(&apos;temp_json.txt&apos;));
    # Adding all installed packages which have updates available;
    final_list.extend([{&apos;packageName&apos;: &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])),
        &apos;updateVersion&apos;:&apos;%s-%s&apos; % (str(j[&apos;updateVersion&apos;]),str(j[&apos;Release&apos;])),
        &apos;installedVersion&apos;:&apos;%s-%s&apos; % (str(i[&apos;installedVersion&apos;]),str(i[&apos;Release&apos;]))
    } for i in data[&apos;installed&apos;] for j in data[&apos;updates&apos;]
        if &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) == &apos;%s.%s&apos; % (str(j[&apos;packageName&apos;]),str(j[&apos;Arch&apos;]))]);
    # List of all installed packages with updates;
    already_installed.extend([str(i[&apos;packageName&apos;]) for i in final_list ]);
    # List of all installed packages;
    installed_list.extend([&apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;]))
        for i in data[&apos;installed&apos;] if &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) not in already_installed ]);
    # List of all packages which are not installed but available;
    updates_list.extend([&apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) for i in data[&apos;updates&apos;]
        if &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) not in already_installed ]);

    # Adding all packages which are not installed;
    final_list.extend([{&apos;packageName&apos;: &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])),
         &apos;updateVersion&apos;: &apos;%s-%s&apos; % (str(i[&apos;updateVersion&apos;]), str(i[&apos;Release&apos;])),
         &apos;installedVersion&apos;: str(i[&apos;installedVersion&apos;])} for i in data[&apos;updates&apos;]
            if &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) in updates_list ]);

    # Finally adding list of all packages which are installed but no updates available;
    final_list.extend([{&apos;packageName&apos;: &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])),
         &apos;updateVersion&apos;: &apos;%s-%s&apos; % (str(i[&apos;installedVersion&apos;]),str(i[&apos;Release&apos;])),
         &apos;installedVersion&apos;: &apos;%s-%s&apos; % (str(i[&apos;installedVersion&apos;]), str(i[&apos;Release&apos;]))} for i in data[&apos;installed&apos;]
            if &apos;%s.%s&apos; % (str(i[&apos;packageName&apos;]),str(i[&apos;Arch&apos;])) in installed_list ]);
except Exception, ex:
    print &apos;Error: &apos;, str(ex)
    final_list = []
# Dump the list of packages;
print json.dumps(final_list);&quot;

# get search keyword and fetch all the packages matching given keyword, dump the result for later use.
echo &quot;#### Getting a list of all installed or available packages&quot;
echo &quot;#### Running yum info&quot;
#sudo yum clean expire-cache
# List of all packages matching the filter after updating
sudo yum info &gt; AllPackagesInfo.txt
echo &quot;Done fetching packages&quot;
# initializing variables needed.
installed_packages=()
installed_packages_counter=0
updates_packages=()
updates_packages_counter=0
package_array=()
package_array_counter=0
file_data=()
return_val=&apos;&apos; # This will be used as return value for return data from functions

# This function will return true if the key to be checked is in required list.
# Inputs arguments:
#   input_string    String
# Returns
#   Boolean indicating whether key is valid or not
function check_if_required_key {
    required_keys=(&quot;Name : &quot; &quot;Version : &quot; &quot;Summary : &quot; &quot;Arch : &quot; &quot;Release : &quot;)
    input_string=&quot;$1&quot;
    for i in &quot;${required_keys[@]}&quot;; do
        if test &quot;${input_string#*$i}&quot; != &quot;$input_string&quot;;then
            return_val=true
            return 0
        fi
    done
    return_val=false
}

# This function will strip input string of extra leading/trailing spaces
# Inputs arguments:
#   input_string    String
# Returns
#   String without leading or trailing spaces
function strip_extra_spaces {
    input_string=&quot;$1&quot;
    return_val=$(echo &quot;${input_string}&quot; | sed -e &apos;s/^ *//g;s/ *$//g&apos;)
}

# This function will accept input string with delimiter to separate string into two separate arrays
# one containing installed packages and other containing available updates.
# Input arguments:
#   input_string String
#   delimiter   String
#   is_installed_package    boolean
function separate_installed_packages_from_list {
    if [ $package_array_counter -eq 0 ]; then
        package_array[$package_array_counter]=&quot;{&quot;
        package_array_counter=$(($package_array_counter + 1))
    fi
    strip_extra_spaces &quot;$1&quot;
    input_string=&quot;$return_val&quot;
    input_string=$(echo $input_string | sed &quot;s/\&quot;/\&apos;/g&quot;)
    input_string=$(echo $input_string | sed &quot;s/\\\//g&quot;)
    delimiter=&quot;$2&quot;
    is_installed_package=$3

    if [ -z &quot;$input_string&quot; -a $package_array_counter -gt 0 ]; then
        if $is_installed_package ; then
            if [ $installed_packages_counter -gt 0 ];then
                separator=&quot;,&quot;
            else
                separator=&quot;&quot;
            fi
            package_array[$package_array_counter]=&quot;\&quot;packageInstalled\&quot; : true, \&quot;updateAvailable\&quot; : false, \&quot;updateVersion\&quot;: \&quot;N/A\&quot; }&quot;
            installed_packages[$installed_packages_counter]=`echo $separator ${package_array[@]}`
            installed_packages_counter=$((installed_packages_counter + 1))
        else
            if [ $updates_packages_counter -gt 0 ];then
                separator=&quot;,&quot;
            else
                separator=&quot;&quot;
            fi
            package_array[$package_array_counter]=&quot;\&quot;packageInstalled\&quot; : false, \&quot;updateAvailable\&quot; : true, \&quot;installedVersion\&quot;: \&quot;N/A\&quot; }&quot;
            updates_packages[$updates_packages_counter]=`echo $separator ${package_array[@]}`
            updates_packages_counter=$((updates_packages_counter + 1))
        fi
        package_array_counter=0
    else
        check_if_required_key &quot;$input_string&quot;
        is_required_key=$return_val
        if ! $is_required_key; then
            return 0
        fi
        data_string=&quot;\&quot;$input_string\&quot; ,&quot;
        # Change key &quot;name&quot; -&gt; &quot;packageName&quot;
        data_string=`echo $data_string | sed &quot;s/Name/packageName/g&quot;`
        if $is_installed_package ; then
            data_string=`echo $data_string | sed &quot;s/Version/installedVersion/g&quot;`
        else
            data_string=`echo $data_string | sed &quot;s/Version/updateVersion/g&quot;`
        fi
        package_array[$package_array_counter]=`echo $data_string | sed &quot;s/ : /\&quot; : \&quot;/g&quot;`
        package_array_counter=$(($package_array_counter + 1))
    fi
}

# This function will return true if the key to be checked is in required list.
# Inputs arguments:
#   input_string    String
# Returns
#   Boolean indicating whether key is valid or not
function read_file {
    file_name=&quot;$1&quot;
    delimiter=&apos; : &apos;
    should_begin=false
    is_installed_package=true
    while IFS=&apos;&apos; read -r line || [[ -n $line ]]; do
        search_string_install=&apos;Installed Packages&apos;
        search_string_updates=&apos;Available Packages&apos;

        if test &quot;${line#*$search_string_updates}&quot; != &quot;$line&quot;;then
            is_installed_package=false
        fi

        if ! $should_begin ; then
            if test &quot;${line#*$search_string_install}&quot; != &quot;$line&quot;;then
                should_begin=true
            elif test &quot;${line#*$search_string_updates}&quot; != &quot;$line&quot;;then
                should_begin=true
            fi
        else
            if test &quot;${line#*$search_string_updates}&quot; = &quot;$line&quot;;then
                separate_installed_packages_from_list &quot;$line&quot; &quot;$delimiter&quot; $is_installed_package
            fi
        fi

    done &lt; &quot;$file_name&quot;
}

read_file &apos;AllPackagesInfo.txt&apos;
echo &quot;#### Iterating over the packages matching the filter and generating data for each.&quot;
echo &quot;{\&quot;installed\&quot;: [${installed_packages[@]}], \&quot;updates\&quot;: [${updates_packages[@]}]}&quot; &gt; temp_json.txt
echo &quot;Starting JSON building&quot;
# using echo statement instead of printf so that above formatting is retained.
echo &quot;$python_architecute_package_script&quot; &gt; arch_packages.py
arch_packages=$( python arch_packages.py )
echo $arch_packages &gt; RHEL_7_2_Package_List.json

echo &quot;#### Completed fetching data for all packages.&quot;
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>*.json</artifacts>
      <allowEmptyArchive>false</allowEmptyArchive>
      <onlyIfSuccessful>false</onlyIfSuccessful>
      <fingerprint>false</fingerprint>
      <defaultExcludes>true</defaultExcludes>
    </hudson.tasks.ArtifactArchiver>
  </publishers>
  <buildWrappers/>
</project>
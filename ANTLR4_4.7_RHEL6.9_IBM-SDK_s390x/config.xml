<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_rh6.9_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 16 * * 1</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 16 * * 1</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Set the below parameters manually
package_name=&quot;antlr4&quot;
published_version=&quot;4.7&quot;
source /home/test/.bashrc

available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
PRETTY_NAME=&quot;Red Hat Enterprise Linux Server release 6.9 (Santiago)&quot;

if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo for $PRETTY_NAME.&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi

sudo yum install -y tar python wget git java-1.8.0-ibm-devel ant autoconf automake libtool which gcc-c++ make ncurses patch xz
sudo rm -rf srcrt
mkdir srcrt

cd srcrt
export WORK_DIR=`pwd`

#build mono 4.8.0
git clone git://github.com/mono/mono
cd mono
git checkout mono-4.8.0.524
./autogen.sh --disable-nls
make get-monolite-latest
make 
sudo make install


# install Maven
cd ..		
wget https://archive.apache.org/dist/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.tar.gz
tar -xvzf apache-maven-3.3.9-bin.tar.gz
export PATH=$PWD/apache-maven-3.3.9/bin::$PATH


#Gcc Installation
sudo yum install -y wget tar make flex subversion gcc gcc-c++ binutils-devel bzip2
mkdir $WORK_DIR/gcc &amp;&amp; 
cd $WORK_DIR/gcc
svn co svn://gcc.gnu.org/svn/gcc/trunk@223813 gcc_srcDir
cd gcc_srcDir/
./contrib/download_prerequisites
mkdir -p $WORK_DIR/gcc/gcc_buildDir/build
cd $WORK_DIR/gcc/gcc_buildDir/build
 ../../gcc_srcDir/configure \
--prefix=&quot;/opt/gccgo&quot; \
--enable-shared --with-system-zlib --enable-threads=posix \
--disable-multilib --enable-__cxa_atexit --enable-checking \
--enable-gnu-indirect-function --enable-languages=&quot;c,c++&quot; \
--disable-bootstrap
make all
sudo make install
export PATH=/opt/gccgo/bin:$PATH
sudo sh -c &quot;echo &apos;/opt/gccgo/lib64&apos; &gt;&gt; /etc/ld.so.conf.d/gccgo.conf&quot;
sudo /sbin/ldconfig
gcc --version


# install nodejs
wget https://nodejs.org/dist/v6.11.0/node-v6.11.0-linux-s390x.tar.xz
tar xf node-v6.11.0-linux-s390x.tar.xz
export PATH=$PWD/node-v6.11.0-linux-s390x/bin:$PATH


# Build and install Python3
sudo yum install -y gcc gcc-c++ make ncurses patch wget tar zlib zlib-devel xz xz-devel
wget https://www.python.org/ftp/python/3.5.3/Python-3.5.3.tar.xz
tar -xvf Python-3.5.3.tar.xz
cd Python-3.5.3
./configure --prefix=/usr/local --exec-prefix=/usr/local
make
sudo make install

#Build and install Python2.7
wget https://www.python.org/ftp/python/2.7.14/Python-2.7.14.tar.xz
tar -xvf Python-2.7.14.tar.xz
cd Python-2.7.14
./configure --prefix=/usr/local --exec-prefix=/usr/local
make
sudo make install

# install GO
cd ..
wget https://storage.googleapis.com/golang/go1.9.2.linux-s390x.tar.gz
tar -xzf go1.9.2.linux-s390x.tar.gz

export PATH=$PATH:$PWD/go/bin
export GOROOT=$PWD/go
export CC=gcc


# Set env variables
export JAVA_HOME=/usr/lib/jvm/java


# Building and installing ANTLR4
git clone git://github.com/antlr/antlr4.git
cd antlr4
git checkout 4.7
export MAVEN_OPTS=&quot;-Xmx1G&quot;

#change in code
sed -i &apos;/Array.Reverse/i \
if(BitConverter.IsLittleEndian)&apos; runtime/CSharp/runtime/CSharp/Antlr4.Runtime/Atn/ATNDeserializer.cs
sed -i &apos;s/20000/200000/&apos; tool-testsuite/test/org/antlr/v4/test/tool/TestPerformance.java

mvn install</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@aditya.pawaskar</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
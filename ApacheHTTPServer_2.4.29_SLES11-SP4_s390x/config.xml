<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dockercloud_sles11-sp4</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 22 * * 1</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command> #Set the below parameters manually
package_name=&quot;apache2&quot;
published_version=&quot;2.4.29&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi
#-------------------------------------------------------------------------------------


# Install Dependencies
export WORK_DIR=`pwd`
sudo zypper update -y
sudo zypper install -y git gcc autoconf make pcre pcre-devel libxml2 libxml2-devel libexpat-devel wget tar awk curl
#Install OpenSSL
cd $WORK_DIR
wget ftp https://www.openssl.org/source/old/1.0.2/openssl-1.0.2l.tar.gz
tar zxf openssl-1.0.2l.tar.gz
cd openssl-1.0.2l
./config --prefix=/usr --openssldir=/etc/ssl --libdir=lib shared zlib-dynamic
make
sudo make install		
export PATH=/usr/local/ssl/bin:$PATH
#export PATH=/usr/local/bin:$PATH
#Install Libtool
cd $WORK_DIR
wget http://ftpmirror.gnu.org/libtool/libtool-2.4.6.tar.gz
tar -xvf libtool-2.4.6.tar.gz
cd libtool-2.4.6
./configure
make
sudo make install

# Change the working directory to httpd  source folder
cd $WORK_DIR
git clone git://github.com/apache/httpd.git
cd httpd
git checkout 2.4.29

# Download apr and apr-util source
cd $WORK_DIR/httpd/srclib
git clone git://github.com/apache/apr.git
cd $WORK_DIR/httpd/srclib/apr 
git checkout 1.6.3
cd $WORK_DIR/httpd/srclib
git clone git://github.com/apache/apr-util.git
cd $WORK_DIR/httpd/srclib/apr-util
git checkout 1.6.1

# Build and install httpd
cd $WORK_DIR/httpd
./buildconf 
./configure --prefix=/usr/local --with-included-apr
make 
sudo make install

#Start and stop the service
sudo /usr/local/bin/apachectl configtest
sudo /usr/local/bin/apachectl -k start 
sleep 10s
ps -aef | grep httpd

curl http://127.0.0.1:80 

sudo /usr/local/bin/apachectl -k stop
sleep 10s
ps -aef
curl -vs http://localhost:80 2&gt;&amp;1 | grep refused</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@nbhave</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
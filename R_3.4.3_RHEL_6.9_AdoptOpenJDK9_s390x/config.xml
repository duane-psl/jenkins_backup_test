<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_rh6.9_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 7</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 13 * * 7</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Set the below parameters manually
package_name=&quot;r-base&quot;
published_version=&quot;3.4.3&quot;

source /home/test/.bashrc
#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 

if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi
########################

sudo yum install -y wget tar make rpm-build help2man git ncurses-devel cairo-devel gcc-c++ libcurl-devel libjpeg-devel libpng-devel libtiff-devel readline-devel  xdg-utils pango-devel tcl-devel tk-devel  texinfo gcc-gfortran libXt-devel  perl-Text-Unidecode.noarch 

echo $HOME

export WORKDIR=`pwd`

wget https://github.com/AdoptOpenJDK/openjdk9-releases/releases/download/jdk-9%2B181/OpenJDK9_s390x_Linux_jdk-9.181.tar.gz
tar -xvzf OpenJDK9_s390x_Linux_jdk-9.181.tar.gz 
export JAVA_HOME=$WORKDIR/jdk-9+181
export PATH=$JAVA_HOME/bin:$PATH
java -version


export PATH=$HOME/packages/bin:$PATH
export LD_LIBRARY_PATH=$HOME/packages/lib:$LD_LIBRARY_PATH
export CFLAGS=&quot;-I$HOME/packages/include&quot;
export LDFLAGS=&quot;-L$HOME/packages/lib&quot;

#zlib 
cd $WORKDIR
wget https://sourceforge.net/projects/libpng/files/zlib/1.2.8/zlib-1.2.8.tar.gz/download
tar xzvf download
cd zlib-1.2.8
./configure --prefix=/usr &amp;&amp; make &amp;&amp; sudo make install

cd $WORKDIR
wget http://www.bzip.org/1.0.6/bzip2-1.0.6.tar.gz
tar xzvf bzip2-1.0.6.tar.gz
cd bzip2-1.0.6
make &amp;&amp; sudo make install

cd $WORKDIR
 wget https://distfiles.macports.org/xz/xz-5.2.2.tar.bz2
 tar xjvf xz-5.2.2.tar.bz2
cd xz-5.2.2
./configure --prefix=$HOME/packages
make -j3 &amp;&amp; sudo make install

cd $WORKDIR
wget  ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.40.tar.gz
tar xzvf pcre-8.40.tar.gz
cd pcre-8.40
./configure --enable-utf8 --prefix=$HOME/packages
make &amp;&amp; sudo make install


cd $WORKDIR
git clone git://github.com/openssl/openssl.git &amp;&amp; cd openssl 
git checkout OpenSSL_1_1_0e &amp;&amp; ./config enable-shared &amp;&amp; sudo make depend &amp;&amp; make &amp;&amp; sudo make install

sudo ln -sf /usr/local/ssl/bin/openssl `which openssl`


export LD_LIBRARY_PATH=$WORKDIR/openssl:$LD_LIBRARY_PATH
sudo ldconfig

cd $WORKDIR
wget http://curl.askapache.com/download/curl-7.54.0.tar.gz
tar xzvf curl-7.54.0.tar.gz
cd curl-7.54.0

LDFLAGS=-R/usr/local/ssl/lib ./configure --with-ssl &amp;&amp; make &amp;&amp; sudo make install

export LD_LIBRARY_PATH=$WORKDIR/curl-7.54.0/lib/.libs:$LD_LIBRARY_PATH
sudo ldconfig
cd $WORKDIR
wget https://cran.r-project.org/src/base/R-3/R-3.4.3.tar.gz
tar zxvf R-3.4.3.tar.gz
cd R-3.4.3


./configure --with-x=no
make &amp;&amp; sudo make install

export LANG=&quot;en_US.UTF-8&quot;
export TZ=CET
make check

echo &quot;sessionInfo()&quot; | R --save</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@vaibhavv</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
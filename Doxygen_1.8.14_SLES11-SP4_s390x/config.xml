<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_sl11-SP4_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 4</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 13 * * 4</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>sudo zypper up -y
# Install dependencies
sudo zypper install -y git flex bison gcc gcc-c++ make openssl wget tar libqt4-devel libxml2-devel texlive ghostscript-devel texlive-bin-tools unzip graphviz python-xml python-argparse libxml2-devel perl perl-YAML zip texlive*
export WORK_DIR=`pwd`

# Install CMake
wget http://www.cmake.org/files/v2.8/cmake-2.8.12.2.tar.gz
gzip -d cmake-2.8.12.2.tar.gz
tar xvf cmake-2.8.12.2.tar
cd cmake-2.8.12.2
./configure --prefix=/cmake-2.8.12.2/cmake
make
sudo make install
export PATH=/$WORK_DIR/cmake-2.8.12.2/bin:$PATH

# Use CPAN to install Perl modules 
sudo cpan Test::More
sudo cpan File::Path

cd $WORK_DIR
mkdir latex_dependencies
cd latex_dependencies
# Install dependencies(latex) for make docs command: 
wget http://mirrors.ctan.org/macros/latex/contrib/multirow/multirow.dtx
wget http://mirrors.ctan.org/macros/latex/contrib/multirow/multirow.ins
wget http://mirrors.ctan.org/macros/latex/contrib/multirow/multirow.pdf
tex multirow.ins
  
wget  http://mirrors.ctan.org/macros/latex/contrib/import/import.sty 
wget http://mirrors.ctan.org/macros/latex/contrib/xtab/xtab.dtx
wget http://mirrors.ctan.org/macros/latex/contrib/xtab/xtab.ins 
wget http://mirrors.ctan.org/macros/latex/contrib/xtab/xtab.pdf 
latex xtab.ins 
  
wget http://mirrors.ctan.org/macros/latex/contrib/sectsty/sectsty.dtx
wget http://mirrors.ctan.org/macros/latex/contrib/sectsty/sectsty.ins 
wget http://mirrors.ctan.org/macros/latex/contrib/sectsty/sectsty.pdf 
latex sectsty.ins 
  
wget http://mirrors.ctan.org/macros/latex/contrib/tocloft/tocloft.dtx 
wget http://mirrors.ctan.org/macros/latex/contrib/tocloft/tocloft.ins 
wget http://mirrors.ctan.org/macros/latex/contrib/tocloft/tocloft.pdf 
latex tocloft.ins 
  
wget http://mirrors.ctan.org/macros/latex/contrib/appendix/appendix.dtx 
wget http://mirrors.ctan.org/macros/latex/contrib/appendix/appendix.ins 
wget http://mirrors.ctan.org/macros/latex/contrib/appendix/appendix.pdf 
latex appendix.ins 
  
wget http://mirrors.ctan.org/macros/latex/contrib/tabu/tabu.dtx 
wget http://mirrors.ctan.org/macros/latex/contrib/tabu/tabu.ins 
wget http://mirrors.ctan.org/macros/latex/contrib/tabu/tabu.pdf 
latex tabu.ins
  
# The files are made available to latex by placing at specific location
sudo cp *.sty /usr/share/texmf/tex/latex/  
sudo mktexlsr


cd $WORK_DIR
#  Check-out Doxygen from github, it will be placed in a sub-directory doxygen
git clone git://github.com/doxygen/doxygen.git
cd doxygen
git checkout Release_1_8_14

# Create a build directory where the output should be stored
mkdir build
cd build
cmake -G &quot;Unix Makefiles&quot; -Dbuild_doc=ON -Dbuild_wizard=YES ..
make
make docs
sudo make install
make tests

doxygen -v
if [[ $? -gt 0 ]]
then
	exit 1
fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build, @gsalgaon</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
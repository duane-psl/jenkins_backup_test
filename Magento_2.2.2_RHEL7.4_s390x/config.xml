<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_rh7.4_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 20 * * 4</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 20 * * 4</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>source /home/test/.bashrc
#Set the below parameters manually
package_name=&quot;magento&quot;
published_version=&quot;2.2.2&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	available_version=$(sudo apt-get update &amp;&amp; sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi
#-----------------------------------------------------------------------------------------
export work_dir=`pwd`

sudo yum install -y wget tar curl vim gcc make patch httpd-devel libxml2-devel.s390x libjpeg-devel libpng-devel 
sudo yum install -y curl-devel cronie openssh libicu-devel libxslt-devel.s390x libicu-devel.s390x gcc-c++.s390x
sudo yum install -y openssl-devel.s390x openssl.s390x openssl-libs.s390 libcurl-devel.s390x freetype.s390x freetype-devel.s390x
 
 
###Mysql
### Install dependencies
sudo yum install -y git gcc gcc-c++ make cmake bison ncurses-devel perl-Data-Dumper curl wget

### Build and install MySQL 
git clone https://github.com/mysql/mysql-server.git
cd mysql-server
git checkout tags/mysql-5.7.20
cmake . -DDOWNLOAD_BOOST=1 -DWITH_BOOST=.
gmake 
sudo gmake install

### Post installation setup 
if !(getent passwd mysql); then
 sudo useradd mysql
fi

cd /usr/local/mysql
sudo chown -R mysql .
sudo chgrp -R mysql .

nohup sudo bin/mysqld --initialize --user=mysql &amp; 
sudo /usr/local/mysql/bin/mysqld_safe --user=mysql &amp;
/usr/local/mysql/bin/mysqladmin --version --password=grep &apos;root@localhost:&apos; /home/test/nohup.out | sed &apos;s/^.*: //&apos;

 
###Install libmcrypt
  cd $work_dir
  wget http://sourceforge.net/projects/mcrypt/files/Libmcrypt/2.5.8/libmcrypt-2.5.8.tar.gz
  tar -xzvf libmcrypt-2.5.8.tar.gz
  cd libmcrypt-2.5.8
  ./configure
  make
  sudo make install
  export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:$LD_LIBRARY_PATH
  

###PHP

    cd $work_dir
    wget http://www.php.net/distributions/php-7.0.23.tar.gz  
    tar xvzf php-7.0.23.tar.gz 	
	cd php-7.0.23
    ./configure --with-apxs2=/usr/bin/apxs --without-pcre-jit --enable-soap --with-openssl  --with-libxml-dir=/usr/lib64 --with-mysqli --with-gd --with-jpeg-dir=/usr/include/jpeglib.h --with-png-dir --with-pdo_mysql  --with-curl  --with-mcrypt --enable-mbstring --enable-intl --enable-zip --with-xsl --with-freetype-dir=/usr/lib64/
    make   
    sudo make install
    sudo cp $work_dir/php-7.0.23/php.ini-development /usr/local/php/php.ini 
    export PATH=$PATH:/usr/local/php/bin/
	php -v
    
    
    ###Install Composer
cd $work_dir
curl -sS https://getcomposer.org/installer | php
sudo mv composer.phar /usr/local/bin/composer
chmod +x /usr/local/bin/composer
export PATH=$PATH:/usr/local/bin/
composer -V

###Modify config files
line1=&quot;AllowOverride None&quot;
line2=&quot;AllowOverride All&quot;
sudo chmod 766 /etc/httpd/conf/httpd.conf
sudo cp /etc/httpd/conf/httpd.conf /etc/httpd/conf/httpd.conf.old
sudo chmod 766 /etc/httpd/conf/httpd.conf.old
sudo sed -i &quot;152s/$line1/$line2/&quot; /etc/httpd/conf/httpd.conf

sudo echo -e &quot;ServerName localhost \t
AddType application/x-httpd-php .php \t
&lt;Directory /&gt; \t
DirectoryIndex index.php index.html \t
&lt;/Directory&gt; \t
LoadModule php7_module        /usr/lib64/httpd/modules/libphp7.so&quot; &gt;&gt;  /etc/httpd/conf/httpd.conf

sudo diff -u /etc/httpd/conf/httpd.conf.old /etc/httpd/conf/httpd.conf || true

###download magento source 
cd /var/www/html/
sudo chmod -R a+w /var/www/html/
git clone https://github.com/magento/magento2.git
cd magento2
git checkout 2.2.2
composer install

sudo /usr/sbin/groupadd wwwrun
sudo  usermod -g wwwrun test
cd /var/www/html/magento2 &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type f -exec chmod g+w {} \; &amp;&amp; sudo find var vendor pub/static pub/media app/etc -type d -exec chmod g+ws {} \; &amp;&amp; sudo chown -R apache:apache . &amp;&amp; sudo chmod u+x bin/magento

#Create Magento database

sudo httpd -k restart  


















</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build, @cgopi</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
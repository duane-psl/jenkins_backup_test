<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_ub18.04_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H H * * 6</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Install dependencies
sudo apt-get update
sudo apt-get install -y libboost-dev openssl libpkgconfig-perl libclang1-4.0 git libtool wget tar  dh-autoreconf pkg-config curl cmake


# Install libmongoc driver
rm -rf mongo-c-driver
git clone https://github.com/mongodb/mongo-c-driver.git 
cd mongo-c-driver 
git checkout r1.9
./autogen.sh 
./configure 
make clean &amp;&amp; make &amp;&amp; sudo make install

# Install mongo-cxx-driver
cd ../
rm -rf r3.2.0.tar.gz
curl -OL https://github.com/mongodb/mongo-cxx-driver/archive/r3.2.0.tar.gz
tar -xzf r3.2.0.tar.gz
cd mongo-cxx-driver-r3.2.0/build
cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local ..
export PATH=/usr/local:$PATH

# Only for MNMLSTC polyfill
sudo make EP_mnmlstc_core
# Once MNMLSTC is installed, or if you are using a different polyfill, build and install the driver:
make &amp;&amp; sudo make install

cd ../../
rm -rf test.cpp
touch test.cpp


echo &apos;#include &lt;iostream&gt;

#include &lt;bsoncxx/builder/stream/document.hpp&gt;
#include &lt;bsoncxx/json.hpp&gt;

#include &lt;mongocxx/client.hpp&gt;
#include &lt;mongocxx/instance.hpp&gt;

int main(int, char**) {
    mongocxx::instance inst{};
    mongocxx::client conn{mongocxx::uri{}};

    bsoncxx::builder::stream::document document{};

    auto collection = conn[&quot;testdb&quot;][&quot;testcollection&quot;];
    document &lt;&lt; &quot;hello&quot; &lt;&lt; &quot;world&quot;;

    collection.insert_one(document.view());
    auto cursor = collection.find({});

    for (auto&amp;&amp; doc : cursor) {
        std::cout &lt;&lt; bsoncxx::to_json(doc) &lt;&lt; std::endl;
    }
}&apos;&gt;&gt; test.cpp

export LD_LIBRARY_PATH=/usr/local/lib/
export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
c++ --std=c++11 test.cpp -o test $(pkg-config --cflags --libs libmongocxx)


#Install MongoDB server
sudo apt-get install -y wget
wget https://repo.mongodb.com/apt/ubuntu/dists/xenial/mongodb-enterprise/3.6/multiverse/binary-s390x/mongodb-enterprise-server_3.6.3_s390x.deb
sudo dpkg -i --force-all mongodb-enterprise-server_3.6.3_s390x.deb 
sudo apt-get install -y -f
sudo mkdir -p db
sudo /usr/bin/mongod --dbpath db &amp;
sleep 40s


# Execute test program
./test &gt; test_result.log

cat test_result.log

echo -e &apos;{ &quot;_id&quot; : { &quot;$oid&quot; : &quot;5912af38b2c736cfdd73be82&quot; }, &quot;hello&quot; : &quot;world&quot; }&apos; &gt; expected_result.log

sed -i &apos;s/&quot;_id&quot; : { &quot;$oid&quot; : &quot;[0-9 a-z]*&quot; }/&quot;_id&quot;/&apos; expected_result.log
sed -i &apos;s/&quot;_id&quot; : { &quot;$oid&quot; : &quot;[0-9 a-z]*&quot; }/&quot;_id&quot;/&apos; test_result.log
diff --ignore-all-space test_result.log expected_result.log

if [ &quot;$?&quot; -eq 0 ]; then
  echo &quot;OUTPUT FROM DATABASE&quot;
  exit 0
else
  exit 1
fi
</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build, @agautam</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_ub16.04_4096</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 0</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 15  * * 7</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Check if published version is already present in repo 
package_name=&quot;tensorflow&quot;
published_version=&quot;1.4.1&quot;

#Check distro and available version in repo : rhel7.x, Sles11.x/12.x, Ub16.x/17.x 
. /etc/os-release
if [ $ID == &quot;rhel&quot; ]; then
	available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;sles&quot; ]; then
	available_version=$(sudo zypper info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
elif [ $ID == &quot;ubuntu&quot; ]; then
	sudo apt-get update
	available_version=$(sudo apt-cache policy $package_name | grep Candidate | head -1 | cut -d &apos; &apos; -f 4)
fi


if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Available version: $available_version&quot;
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi


#==============================================================================================#

sudo apt-get update  
sudo apt-get install -y pkg-config zip g++ zlib1g-dev unzip git vim tar wget automake autoconf libtool make curl maven openjdk-8-jdk python-pip python-virtualenv python-numpy swig python-dev libcurl3-dev python-mock python-scipy bzip2 glibc* python-sklearn   
sudo easy_install pip  
sudo pip install wheel backports.weakref portpicker futures grpc enum34   


export work_dir=$(pwd)
cd $work_dir

mkdir bazel &amp;&amp; cd bazel
wget https://github.com/bazelbuild/bazel/releases/download/0.10.0/bazel-0.10.0-dist.zip
unzip bazel-0.10.0-dist.zip 
chmod -R +w .

#echo -e &apos;@@ -128,6 +128,23 @@
#   return old_value;
# }

#+inline Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr,
#+ Atomic64 increment) {
#+ return __atomic_add_fetch(ptr, increment, __ATOMIC_RELAXED);
#+}
#+
#+inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {
#+ __atomic_store_n(ptr, value, __ATOMIC_RELAXED);
#+}
#+
#+inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,
#+Atomic64 new_value) {
#+ return __atomic_exchange_n(ptr, new_value, __ATOMIC_RELAXED);
#+}
#+
#+inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {
#+return __atomic_load_n(ptr, __ATOMIC_RELAXED);
##+}
 #endif // defined(__LP64__)&apos; &gt; bazel.patch
 
#patch $work_dir/bazel/third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h &lt; bazel.patch

# Using sed command, apply patch
#cp  third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h  third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h.orig
#sed -s -i &apos;130i\\&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;131 i inline Atomic64 NoBarrier_AtomicIncrement(volatile Atomic64* ptr,&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;132 i Atomic64 increment) {&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;133 i return __atomic_add_fetch(ptr, increment, __ATOMIC_RELAXED);&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;134 i }&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -s -i &apos;135i\\&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h

#sed -i &apos;136 i inline void NoBarrier_Store(volatile Atomic64* ptr, Atomic64 value) {&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;137 i __atomic_store_n(ptr, value, __ATOMIC_RELAXED);&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;138 i }&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -s -i &apos;139i\\&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h

#sed -i &apos;140 i inline Atomic64 NoBarrier_AtomicExchange(volatile Atomic64* ptr,&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;141 i Atomic64 new_value) {&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;142 i return __atomic_exchange_n(ptr, new_value, __ATOMIC_RELAXED);&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;143 i }&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h

#sed -s -i &apos;144i\\&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h

#sed -i &apos;145 i inline Atomic64 NoBarrier_Load(volatile const Atomic64* ptr) {&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;146 i return __atomic_load_n(ptr, __ATOMIC_RELAXED);&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
#sed -i &apos;147 i }&apos; third_party/protobuf/3.0.0/src/google/protobuf/stubs/atomicops_internals_generic_gcc.h
	

# Memory options 
sed -i &apos;117d&apos; scripts/bootstrap/compile.sh
sed -i &apos;117 i run &quot;${JAVAC}&quot; -J-Xms1g -J-Xmx1g -classpath &quot;${classpath}&quot; -sourcepath &quot;${sourcepath}&quot; \\&apos; scripts/bootstrap/compile.sh


bash ./compile.sh
export PATH=$PATH:$work_dir/bazel/output/



cd $work_dir
rm -rf tensorflow
git clone https://github.com/linux-on-ibm-z/tensorflow
cd tensorflow
git checkout v1.4.1-s390x




export TF_NEED_GCP=0
export TF_NEED_HDFS=0
export TF_NEED_CUDA=0
export TF_NEED_S3=0
export PYTHON_BIN_PATH=`which python2`
yes &quot;&quot; | ./configure


bazel build -c opt //tensorflow/tools/pip_package:build_pip_package

# Boringssl patch
#sed -i &apos;145 i #elif defined(__s390x__)&apos; tensorflow/bazel-tensorflow/external/boringssl/src/include/openssl/base.h
#sed -i &apos;145 i #define OPENSSL_64_BIT &apos; tensorflow/bazel-tensorflow/external/boringssl/src/include/openssl/base.h


#echo -e &apos;@@ -94,6 +94,8 @@
 #elif defined(__pnacl__)
 #define OPENSSL_32_BIT
 #define OPENSSL_PNACL
#+#elif defined(__s390x__)
#+#define OPENSSL_64_BIT
 #else
 #error &quot;Unknown target CPU&quot;
 #endif&apos; &gt; boringssl.patch
 
 
# Farmhash patch
#echo -e &apos;@@ -294,4 +294,37 @@

# }  // namespace NAMESPACE_FOR_HASH_FUNCTIONS

#+/* gently define FARMHASH_BIG_ENDIAN when detected big-endian machine */
#+#if defined(__BIG_ENDIAN__)
#+  #if !defined(FARMHASH_BIG_ENDIAN)
#+    #define FARMHASH_BIG_ENDIAN
#+  #endif
#+#elif defined(__LITTLE_ENDIAN__)
#+  // nothing for little-endian
#+#elif defined(__BYTE_ORDER__) &amp;&amp; defined(__ORDER_LITTLE_ENDIAN__) &amp;&amp; (__BYTE_ORDER == __ORDER_LITTLE_ENDIAN__)
#+  // nothing for little-endian
#+#elif defined(__BYTE_ORDER__) &amp;&amp; defined(__ORDER_BIG_ENDIAN__) &amp;&amp; (__BYTE_ORDER == __ORDER_BIG_ENDIAN__)
#+  #if !defined(FARMHASH_BIG_ENDIAN)
#+    #define FARMHASH_BIG_ENDIAN
#+  #endif
#+#elif defined(__linux__) || defined(__CYGWIN__) || defined( __GNUC__ ) || defined( __GNU_LIBRARY__ )
#+  #include &lt;endian.h&gt; // libc6-dev, GLIBC
#+  #if BYTE_ORDER == BIG_ENDIAN
#+    #if !defined(FARMHASH_BIG_ENDIAN)
#+      #define FARMHASH_BIG_ENDIAN
#+    #endif
#+  #endif
#+#elif defined(__OpenBSD__) || defined(__NetBSD__) || defined(__FreeBSD__) || defined(__DragonFly__) || defined(__s390x__)
#+  #include &lt;sys/endian.h&gt;
#+  #if BYTE_ORDER == BIG_ENDIAN
#+    #if !defined(FARMHASH_BIG_ENDIAN)
#+      #define FARMHASH_BIG_ENDIAN
#+    #endif
#+  #endif
#+#elif defined(_WIN32)
#+  // Windows is (currently) little-endian
#+#else
#+  #error &quot;Unable to determine endianness!&quot;
#+#endif /* __BIG_ENDIAN__ */
#+
 #endif  // FARM_HASH_H_&apos; &gt; farmhash.patch

 
#patch -R $work_dir/tensorflow/bazel-tensorflow/external/farmhash_archive/src/farmhash.h &lt; farmhash.patch
#patch $work_dir/tensorflow/bazel-tensorflow/external/farmhash_archive/src/farmhash.h &lt; farmhash.patch
#patch $work_dir/tensorflow/bazel-tensorflow/external/boringssl/src/include/openssl/base.h &lt; boringssl.patch
cd $work_dir/tensorflow


#Test case execution
bazel --host_jvm_args=&quot;-Xms512m&quot; --host_jvm_args=&quot;-Xmx1024m&quot; test --test_timeout 300,450,1200,3600 --build_tests_only -- //tensorflow/... -//tensorflow/compiler/...  || true

$work_dir/tensorflow/bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_wheel
sudo pip install /tmp/tensorflow_wheel/tensorflow-1.4.1-cp27-cp27mu-linux_s390x.whl



</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins
def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
if((it.getComputer().countBusy()) ==1)
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@nthorat</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>true</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_sl11-SP4_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 13 * * 4</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 13 * * 4</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#Set the below parameters manually
package_name=&quot;rails&quot;
published_version=&quot;5.1.5&quot;


available_version=$(sudo yum info $package_name | grep Version | head -1 | cut -d &apos;:&apos; -f 2| cut -d &apos; &apos; -f 2)
PRETTY_NAME=&quot;Red Hat Enterprise Linux Server release 6.9 (Santiago)&quot;

if [[ $available_version == *&quot;$published_version&quot;* ]]; then
	echo &quot;Version $published_version is already available in repo for $PRETTY_NAME.&quot;
    echo &quot;Exact name: $available_version ... Failing&quot;
    exit 1
else	
   echo &quot;Published version is not available in repo. Going ahead.&quot;     
fi


source /home/test/.bashrc
# Build Ruby &amp; install the dependencies
sudo zypper install -y bison libopenssl-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel tcl-devel tk-devel sqlite3-devel gcc make awk wget tar bzip2 subversion gcc-c++ binutils-devel ncurses patch zlib git unzip openssl-devel automake autoconf libtool net-tools libxslt-devel libbz2-devel xz

export work_dir=`pwd`

# Install Gcc 4.8.2 
cd $work_dir
wget http://ftp.gnu.org/gnu/gcc/gcc-4.8.2/gcc-4.8.2.tar.bz2
tar xvf gcc-4.8.2.tar.bz2
cd gcc-4.8.2
./contrib/download_prerequisites
mkdir $work_dir/gccbuild
cd $work_dir/gccbuild
../gcc-4.8.2/configure  --prefix=&quot;/opt/gcc&quot;  --enable-shared --with-system-zlib --enable-threads=posix  --enable-__cxa_atexit --enable-checking --enable-gnu-indirect-function  --enable-languages=&quot;c,c++&quot; --disable-bootstrap --disable-multilib
make all
sudo make install
export PATH=/opt/gcc/bin:$PATH
export LD_LIBRARY_PATH=/opt/gcc/lib64:/opt/gcc/lib:$LD_LIBRARY_PATH
sudo mv /usr/bin/gcc /usr/bin/gcc.bkup
sudo ln -s /opt/gcc/bin/gcc /usr/bin/gcc
gcc --version


# Build OpenSSL
cd $work_dir
wget ftp://ftp.openssl.org/source/old/1.0.2/openssl-1.0.2.tar.gz
tar -xf openssl-1.0.2.tar.gz
cd openssl-1.0.2
./config --prefix=/usr --openssldir=/usr/local/openssl shared
make
sudo make install
openssl version

# Build curl
cd $work_dir 
sudo zypper install -y autoconf automake libtool
git clone git://github.com/curl/curl.git
cd curl
git checkout curl-7_52_1
./buildconf 
./configure --prefix=/usr/local --with-ssl --disable-shared
make &amp;&amp; sudo make install
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib64
export PATH=/usr/local/bin:$PATH

# Generate ca-bundle.crt for curl
echo insecure &gt;&gt; $HOME/.curlrc
wget https://raw.githubusercontent.com/curl/curl/curl-7_53_0/lib/mk-ca-bundle.pl
perl mk-ca-bundle.pl -k
export SSL_CERT_FILE=`pwd`/ca-bundle.crt
rm  $HOME/.curlrc


cd $work_dir
# Download and unpack the Ruby 2.4.1 source code
wget http://cache.ruby-lang.org/pub/ruby/2.5/ruby-2.5.0.tar.gz
tar zxf ruby-2.5.0.tar.gz
cd ruby-2.5.0

# Configure and build Ruby 2.4.1
./configure LDFLAGS=&apos;-L$work_dir/openssl&apos; --with-openssl-include=$work_dir/openssl/include --with-openssl-dir=/usr/
make

# Test results and install ruby
export PATH=/usr/local/bin:$PATH  
make test
sudo -E make install

# Verify that ruby is available
ruby -v
gem env
  
# Correct the gem environment for a standard user  
export GEM_HOME=/home/test/.gem/ruby
export PATH=/home/test/.gem/ruby/bin:$PATH

# Install dependencies
sudo zypper install -y patch make gcc

# Install Rails via gem
gem install rails -v 5.1.5

# Check installed version
rails -v | grep 5.1.5</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build, @ajakhade</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
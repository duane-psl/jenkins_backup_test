<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.scm.NullSCM"/>
  <assignedNode>dc2_ub17.10_2048</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 1 * * 4</spec>
    </hudson.triggers.TimerTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>sudo apt-get update
sudo apt-get install -y autoconf automake gcc libtool make wget pkg-config

wget -O mongo-c-driver-1.9.3.tar.gz  https://github.com/mongodb/mongo-c-driver/releases/download/1.9.3/mongo-c-driver-1.9.3.tar.gz
tar xzf mongo-c-driver-1.9.3.tar.gz
cd mongo-c-driver-1.9.3

./configure
make 
sudo make install

sudo apt-get install -y wget
wget https://repo.mongodb.com/apt/ubuntu/dists/xenial/mongodb-enterprise/3.5/multiverse/binary-s390x/mongodb-enterprise-unstable-server_3.5.10_s390x.deb
sudo dpkg -i --force-all mongodb-enterprise-unstable-server_3.5.10_s390x.deb 
sudo apt-get install -y -f
sudo mkdir -p db
sudo /usr/bin/mongod --dbpath db &amp;
sleep 40s

#Following ouput should be observed:
# { &quot;_id&quot;, &quot;company&quot; : &quot;IBM&quot;, &quot;project&quot; : &quot;MongoDB Driver&quot;, &quot;language&quot; : &quot;C&quot;, &quot;version&quot; : &quot;1.2.0-dev&quot; } 
# { &quot;_id&quot;, &quot;line&quot; : &quot;0&quot; } 
# { &quot;_id&quot;, &quot;line&quot; : &quot;1&quot; } 
# { &quot;_id&quot;, &quot;line&quot; : &quot;2&quot; } 
 
echo &apos;{ &quot;_id&quot; : { &quot;$oid&quot; : &quot;57f4a7113761b4d5bf10bc41&quot; }, &quot;company&quot; : &quot;IBM&quot;, &quot;project&quot; : &quot;MongoDB Driver&quot;, &quot;language&quot; : &quot;C&quot;, &quot;version&quot; : &quot;1.9.3-dev&quot; }
{ &quot;_id&quot; : { &quot;$oid&quot; : &quot;57f4a7113761b4d5bf10bc42&quot; }, &quot;line&quot; : &quot;0&quot; }
{ &quot;_id&quot; : { &quot;$oid&quot; : &quot;57f4a7113761b4d5bf10bc43&quot; }, &quot;line&quot; : &quot;1&quot; }
{ &quot;_id&quot; : { &quot;$oid&quot; : &quot;57f4a7113761b4d5bf10bc44&quot; }, &quot;line&quot; : &quot;2&quot; }&apos; &gt; expected_result.log


echo &quot;#include &lt;bson.h&gt; 
#include &lt;mongoc.h&gt;
#include &lt;stdio.h&gt;

const char* server=\&quot;localhost\&quot;;
const char* test_db=\&quot;ibm_test_db\&quot;;
const char* collection_name=\&quot;mongodb_c_driver\&quot;;

int main (int argc, char *argv[])
{
    mongoc_client_t *client;
    mongoc_collection_t *collection;
    mongoc_cursor_t *cursor;
    bson_error_t error;
    bson_oid_t oid;
    bson_t *doc, query;
    const bson_t *gotdoc;
    char *str;
    int i;
    char istr[2], server_addr[50];

    sprintf(server_addr, \&quot;mongodb://%s:27017/\&quot;, server);

    mongoc_init ();

    client = mongoc_client_new (server_addr);

    collection = mongoc_client_get_collection (client, test_db, collection_name);

    if (!mongoc_collection_drop (collection, &amp;error)) {
        printf (\&quot;%s\\n\&quot;, error.message);
    }

    doc = bson_new ();
    BSON_APPEND_UTF8 (doc, \&quot;company\&quot;, \&quot;IBM\&quot;);
    BSON_APPEND_UTF8 (doc,\&quot;project\&quot;, \&quot;MongoDB Driver\&quot;);
    BSON_APPEND_UTF8 (doc, \&quot;language\&quot;, \&quot;C\&quot;);
    BSON_APPEND_UTF8 (doc, \&quot;version\&quot;, \&quot;1.9.3-dev\&quot;);

    if (!mongoc_collection_insert (collection, MONGOC_INSERT_NONE, doc, NULL, &amp;error)) {
        printf (\&quot;%s \\n\&quot;, error.message);
    }
    bson_destroy (doc);

    for ( i = 0; i &lt; 3; i++) {
        doc = bson_new ();
        sprintf (istr, \&quot;%d\&quot;, i);
        BSON_APPEND_UTF8 (doc, \&quot;line\&quot;, istr);

        if (!mongoc_collection_insert (collection, MONGOC_INSERT_NONE, doc, NULL, &amp;error)) {
            printf (\&quot;%s\\n\&quot;, error.message);
        }
        bson_destroy (doc);
    }

    bson_init (&amp;query);

    cursor = mongoc_collection_find (collection, MONGOC_QUERY_NONE, 0, 0, 0, &amp;query, NULL, NULL);

    while (mongoc_cursor_next (cursor, &amp;gotdoc)) {
            str = bson_as_json (gotdoc, NULL);
        fprintf (stdout, \&quot;%s \\n\&quot;, str);
        bson_free (str);
    }

    bson_destroy (&amp;query);

    mongoc_cursor_destroy (cursor);
    mongoc_collection_destroy (collection);
    mongoc_client_destroy (client);

    return 0;
} &quot; &gt;&gt; test.c

export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/
gcc test.c -o test $(pkg-config --cflags --libs libmongoc-1.0)
export LD_LIBRARY_PATH=/usr/local/lib
./test &gt; test_result.log

echo &quot;Output produced&quot;
cat test_result.log
sed -i.bak -e &apos;1d&apos; test_result.log
sed -i &apos;s/&quot;_id&quot; : { &quot;$oid&quot; : &quot;[0-9 a-z]*&quot; }/&quot;_id&quot;/&apos; expected_result.log
sed -i &apos;s/&quot;_id&quot; : { &quot;$oid&quot; : &quot;[0-9 a-z]*&quot; }/&quot;_id&quot;/&apos; test_result.log

diff --ignore-all-space test_result.log expected_result.log

if [ &quot;$?&quot; -eq 0 ]; then
  echo &quot;OUTPUT FROM DATABASE&quot;
  cat test_result.log
  exit 0
else
  exit 1
fi

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
    if(it.name==x){
it.getComputer().doDoDelete()
    }
}
</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build, @agautam</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>
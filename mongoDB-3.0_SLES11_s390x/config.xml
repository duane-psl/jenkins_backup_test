<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.heavy__job.HeavyJobProperty plugin="heavy-job@1.1">
      <weight>1</weight>
    </hudson.plugins.heavy__job.HeavyJobProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/linux-on-ibm-z/mongo</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>v3.0-s390</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
        <relativeTargetDir>mongo</relativeTargetDir>
      </hudson.plugins.git.extensions.impl.RelativeTargetDirectory>
    </extensions>
  </scm>
  <assignedNode>ketan_sles11</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.TimerTrigger>
      <spec>H 1 * * 1</spec>
    </hudson.triggers.TimerTrigger>
    <hudson.triggers.SCMTrigger>
      <spec>H 1 * * 1
</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>
sudo zypper update -y
sudo zypper install -y git subversion make gcc47-c++ tar wget
sudo ln -s /usr/bin/gcc-4.7 /usr/bin/gcc
sudo ln -s /usr/bin/g++-4.7 /usr/bin/g++
sudo ln -s /usr/bin/gcc /usr/bin/cc
export JENKINS_HOME=`pwd`
cd $JENKINS_HOME
git clone https://github.com/ibmruntimes/v8z
cd $JENKINS_HOME/v8z/
git checkout 3.14-s390
make dependencies
sed -i &quot;s/crsT/crs/g&quot; $JENKINS_HOME/v8z/build/gyp/pylib/gyp/generator/make.py
make s390x -j4
make s390x -j4 library=shared

##&lt;&lt;&apos;comment&apos;

### Cross checking generated files
rm -rf include_headers_test.txt executables_test.txt lib_headers_test.txt
cat &lt;&lt;EOT &gt;&gt; include_headers_test.txt
v8-debug.h
v8-preparser.h
v8-profiler.h
v8-testing.h
v8.h
v8stdint.h
EOT

cat &lt;&lt;EOT &gt;&gt; executables_test.txt
libv8.so
EOT

cat &lt;&lt;EOT &gt;&gt; lib_headers_test.txt
js2c.stamp
libpreparser_lib.a
libv8.so
libv8_base.a
libv8_nosnapshot.a
libv8_snapshot.a
v8.stamp
EOT

ls include/ | tee include_headers.txt
ls out/s390x.release/lib.target/ | tee executables.txt
ls out/s390x.release/obj.target/tools/gyp/ | tee lib_headers.txt

result_include_headers=`diff include_headers.txt include_headers_test.txt`
 
if [ -z &quot;$result_include_headers&quot; ] ; then
  echo &quot;include_headers are generated&quot;
else
  exit 1
fi

result_executables=`diff executables.txt executables_test.txt`
 
if [ -z &quot;$result_executables&quot; ] ; then
  echo &quot;executables are generated&quot;
else
  exit 1
fi
result_lib_headers=`diff lib_headers.txt lib_headers_test.txt`
 
if [ -z &quot;$result_lib_headers&quot; ] ; then
  echo &quot;lib_headers are generated&quot;
else
  exit 1
fi




### Install V8 libraries
sudo cp -vR include/* /usr/include/
sudo chmod -f 644 /usr/include/v8*h

sudo cp -v out/s390x.release/lib.target/lib*.so /usr/local/lib64/ 
sudo chmod -f 755 /usr/local/lib64/libv8.so
sudo cp -v out/s390x.release/obj.target/tools/gyp/lib*.a /usr/local/lib64/

sudo chmod -f 644 /usr/local/lib64/libv8*.a /usr/local/lib64/libpreparser_lib.a
 
sudo /sbin/ldconfig -v

### Verify version of shell
$JENKINS_HOME/v8z/out/s390x.release/shell

##---------------------------------------------------------
##added before rpm step required python

###comment
sudo zypper install -y zlib-devel awk libffi-devel gcc-c++ python bzip2


python --version
cd $JENKINS_HOME
wget https://sourceforge.net/projects/scons/files/scons/2.3.1/scons-2.3.1-1.noarch.rpm
sudo rpm -i scons-2.3.1-1.noarch.rpm

wget ftp://gcc.gnu.org/pub/gcc/releases/gcc-5.1.0/gcc-5.1.0.tar.bz2
tar xjf gcc-5.1.0.tar.bz2
cd gcc-5.1.0
./contrib/download_prerequisites
rm -rf build
mkdir build
cd build
../configure --prefix=/opt/gcc-5.1.0 \
            --enable-languages=&quot;c,c++,go&quot; --enable-shared --with-system-zlib \
            --enable-threads=posix --enable-__cxa_atexit --enable-checking \
            --enable-gnu-indirect-function --disable-multilib --disable-bootstrap
make
sudo make install



cd $JENKINS_HOME
cp $JENKINS_HOME/v8z/include/*.h $JENKINS_HOME/mongo/src/

###cp /v8z/include/*.h /home/test/source_root/mongo/src/



export JENKINS_HOME=`pwd`
cd $JENKINS_HOME/mongo
scons --cc=/opt/gcc-5.1.0/bin/gcc --cxx=/opt/gcc-5.1.0/bin/g++ \
              --static-libstdc++ --disable-warnings-as-errors --opt \
              --use-system-v8 --allocator=system --variant-dir=z all

</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder plugin="groovy-postbuild@2.3.1">
      <script plugin="script-security@1.24">
        <script>import jenkins.model.Jenkins

def x=manager.envVars[&apos;NODE_NAME&apos;]
Jenkins.instance.slaves.each {
if(it.name==x){
it.getComputer().doDoDelete()
}
}</script>
        <sandbox>false</sandbox>
      </script>
      <behavior>0</behavior>
      <runForMatrixParent>false</runForMatrixParent>
    </org.jvnet.hudson.plugins.groovypostbuild.GroovyPostbuildRecorder>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.2">
      <baseUrl></baseUrl>
      <teamDomain></teamDomain>
      <authToken></authToken>
      <authTokenCredentialId></authTokenCredentialId>
      <botUser>false</botUser>
      <room>#loz-jenkins-build,@duaned</room>
      <startNotification>false</startNotification>
      <notifySuccess>false</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>false</notifyUnstable>
      <notifyRegression>false</notifyRegression>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>true</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <includeFailedTests>false</includeFailedTests>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>false</includeCustomMessage>
      <customMessage></customMessage>
    </jenkins.plugins.slack.SlackNotifier>
  </publishers>
  <buildWrappers/>
</project>